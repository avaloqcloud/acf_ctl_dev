[
    {
      "purpose"     : "Let the Help Desk manage users",
      "name"       : "HelpDesk",
      "description" : "Ability to create, update, and delete users and their credentials. It does not include the ability to put users in groups.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group HelpDesk to manage users in tenancy"
      ]
    },
    {
      "purpose"     : "Let auditors inspect your resources",
      "name"       : "Auditors",
      "description" : "Ability to list the resources in all compartments. Be aware that: The operation to list IAM policies includes the contents of the policies themselves. The list operations for Networking resource-types return all the information (for example, the contents of security lists and route tables). The operation to list instances requires the read verb instead of inspect, and the contents include the user-provided metadata. The operation to view Audit service events requires the read verb instead of inspect. Where to create the policy: In the tenancy. Because of the concept of policy inheritance, auditors can then inspect both the tenancy and all compartments beneath it. Or you could choose to give auditors access to only specific compartments if they don't need access to the entire tenancy.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group Auditors to inspect all-resources in tenancy",
        "Allow group Auditors to read instances in tenancy",
        "Allow group Auditors to read audit-events in tenancy"
      ]
    },
    {
      "purpose"     : "Let network admins manage a cloud network",
      "name"       : "NetworkAdmins",
      "description" : "Ability  to manage all components in Networking. This includes cloud networks, subnets, gateways, virtual circuits, security lists, route tables, and so on. If the network admins need to launch instances to test network connectivity, see Let users launch compute instances.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group NetworkAdmins to manage virtual-network-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let network admins manage load balancers",
      "name"       : "NetworkAdmins",
      "description" : "Ability  to manage all components in Load Balancing. If the group needs to launch instances, see Let users launch compute instances.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group NetworkAdmins to manage load-balancers in compartment ${resident}",
        "Allow group NetworkAdmins to use virtual-network-family in compartment ${resident}",
        "Allow group NetworkAdmins to manage instances in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let load-balancer users use load balancers",
      "name"       : "LBUsers",
      "description" : "Ability  to manage all components in Load Balancing. If the group needs to launch instances, see Let users launch compute instances.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group LBUsers to use load-balancers in ${resident}"
      ]
    },
    {
      "purpose"     : "Let users launch compute instances",
      "name"       : "InstanceLaunchers",
      "description" : "Ability  to do everything with instances launched into the cloud network and subnets in compartment ${network}, and attach/detach any existing volumes that already exist in compartment ${application}. The first statement also lets the group create and manage instance images in compartment ${application}. If the group doesn't need to attach/detach volumes, you can delete the volume-family statement.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group InstanceLaunchers to manage instance-family in compartment ${application}",
        "Allow group InstanceLaunchers to read app-catalog-listing in tenancy",
        "Allow group InstanceLaunchers to use volume-family in compartment ${application}",
        "Allow group InstanceLaunchers to use virtual-network-family in compartment ${network}"
      ]
    },
    {
      "purpose"     : "Let users launch compute instances from a specific custom image",
      "name"       : "ImageUsers",
      "description" : "Ability  to launch instances into the cloud network and subnets in compartment ${network} using only the specified custom image. The policy also includes the ability to attach/detach any existing volumes that already exist in compartment ${application}. If the group doesn't need to attach/detach volumes, you can delete the volume-family statement. To specify multiple custom images, you can use conditions.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group ImageUsers to inspect instance-images in compartment ${application}",
        "Allow group ImageUsers to {INSTANCE_IMAGE_READ} in compartment ${application} where target.image.id='${image_OCID}'",
        "Allow group ImageUsers to manage instances in compartment ${application}",
        "Allow group ImageUsers to read app-catalog-listing in tenancy",
        "Allow group ImageUsers to use volume-family in compartment ${resident}",
        "Allow group ImageUsers to use virtual-network-family in compartment ${network}"
      ]
    },
    {
      "purpose"     : "Let image admins manage custom images",
      "name"       : "ImageAdmins",
      "description" : "Ability  to do everything with custom images and compute instances. Also includes the ability to do everything with Object Storage buckets, objects, and namespaces in compartment ${resident} (for creating images from objects and creating pre-authenticated requests to images); to attach/detach any existing volumes in compartment ${application}; and to launch instances into the cloud network and subnets in compartment Z (for creating new instances to base an image on). If the group doesn't need to attach/detach volumes, you can delete the volume-family statement.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group ImageAdmins to manage instances in compartment ${application}",
        "Allow group ImageAdmins to manage instance-images in compartment ${application}",
        "Allow group ImageAdmins to read app-catalog-listing in tenancy",
        "Allow group ImageAdmins to manage object-family in compartment ${resident}",
        "Allow group ImageAdmins to use volume-family in compartment ${resident}",
        "Allow group ImageAdmins to use virtual-network-family in compartment ${network}"
      ]
    },
    {
      "purpose"     : "Let instance pool admins manage Compute instance configurations, instance pools, and cluster networks",
      "name"       : "InstancePoolAdmins",
      "description" : "Ability  to do all things with instance configurations, instance pools, and cluster networks in all compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group InstancePoolAdmins to manage compute-management-family in compartment ${resident}",
        "Allow group InstancePoolAdmins to read instance-family in compartment ${resident}",
        "Allow group InstancePoolAdmins to inspect volumes in compartment ${resident}",
        "Allow service compute_management to use compute-capacity-reservations in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let instance pool users manage Compute instance configurations, instance pools, and cluster networks",
      "name"       : "InstancePoolUsers",
      "description" : "Ability  to do all things with instance configurations, instance pools, and cluster networks in all compartments.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group InstancePoolUsers to use instance-pools in compartment ${resident}",
        "Allow group InstancePoolUsers to use tag-namespaces in tenancy where target.tag-namespace.name = 'oracle-tags'",
        "Allow service compute_management to use compute-capacity-reservations in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users manage Compute autoscaling configurations",
      "name"       : "AutoscalingAdmins",
      "description" : "Ability  to create, update, and delete autoscaling configurations.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AutoscalingAdmins to manage auto-scaling-configurations in compartment ${resident}",
        "Allow group AutoscalingAdmins to manage instance-pools in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users list and subscribe to images from the Partner Image catalog",
      "name"       : "CatalogSubscribers",
      "description" : "Ability  to list and create subscriptions to images in the Partner Image catalog. It does not include the ability to create instances using images from the Partner Image catalog (see Let users launch compute instances).",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group CatalogSubscribers to inspect app-catalog-listing in tenancy",
        "Allow group CatalogSubscribers to read app-catalog-listing in tenancy",
        "Allow group CatalogSubscribers to manage app-catalog-listing in tenancy"
      ]
    },
    {
      "purpose"     : "Let users create Compute instance console connections",
      "name"       : "ConsoleUsers",
      "description" : "Ability  to create instance console connections.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group ConsoleUsers to manage instance-console-connection in tenancy",
        "Allow group ConsoleUsers to read instance in tenancy"
      ]
    },
    {
      "purpose"     : "Let users manage Compute dedicated virtual machine hosts",
      "name"       : "DedicatedVMHostAdmins",
      "description" : "Ability  to create, update, and delete dedicated virtual machine hosts as well as launch instances on dedicated virtual machine hosts.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group DedicatedVMHostAdmins to manage dedicated-vm-hosts in compartment ${resident}",
        "Allow group DedicatedVMHostAdmins to manage instances in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users launch Compute instances on dedicated virtual machine hosts",
      "name"       : "DedicatedVMHostAdmins",
      "description" : "Ability  to launch instances on dedicated virtual machine hosts.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group DedicatedVMHostAdmins to use dedicated-vm-hosts in compartment ${resident}",
        "Allow group DedicatedVMHostAdmins to manage instances in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let volume admins manage block volumes, backups, and volume groups",
      "name"       : "VolumeAdmins",
      "description" : "Ability  to do all things with block storage volumes, volume backups, and volume groups in all compartments with the exception of copying volume backups across regions. This makes sense if you want to have a single set of volume admins manage all the volumes, volume backups, and volume groups in all the compartments. The second statement is required in order to attach/detach the volumes from instances.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group VolumeAdmins to manage volume-family in compartment ${resident}",
        "Allow group VolumeAdmins to use instance-family in compartment ${resident}",
        "Allow group VolumeAdmins to use volume-backups in compartment ${resident} where request.permission='VOLUME_BACKUP_COPY'",
        "Allow group VolumeAdmins to use boot-volume-backups in compartment ${resident} where request.permission='BOOT_VOLUME_BACKUP_COPY'"
      ]
    },
    {
      "purpose"     : "Let volume backup admins manage only backups",
      "name"       : "VolumeBackupAdmins",
      "description" : "Ability  to do all things with volume backups, but not create and manage volumes themselves. This makes sense if you want to have a single set of volume backup admins manage all the volume backups in all the compartments. The first statement gives the required access to the volume that is being backed up; the second statement enables creation of the backup (and the ability to delete backups). The third statement enables the creation and management of user defined backup policies; the fourth statement enables assignment and removal of assignment of backup policies.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group VolumeBackupAdmins to use volumes in compartment ${resident}",
        "Allow group VolumeBackupAdmins to manage volume-backups in compartment ${resident}",
        "Allow group VolumeBackupAdmins to manage backup-policies in compartment ${resident}",
        "Allow group VolumeBackupAdmins to manage backup-policy-assignments in compartment ${resident}",
        "Allow group VolumeBackupAdmins to use volumes in compartment ${resident}",
        "Allow group VolumeBackupAdmins to manage volume-backups in compartment ${resident}",
        "Allow group VolumeBackupAdmins to inspect volume-attachments in compartment ${resident}",
        "Allow group VolumeBackupAdmins to inspect instances in compartment ${resident}",
        "Allow group VolumeBackupAdmins to manage backup-policies in compartment ${resident}",
        "Allow group VolumeBackupAdmins to manage backup-policy-assignments in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let boot volume backup admins manage only backups",
      "name"       : "BootVolumeBackupAdmins",
      "description" : "Ability  to do all things with boot volume backups, but not create and manage boot volumes themselves. This makes sense if you want to have a single set of boot volume backup admins manage all the boot volume backups in all the compartments. The first statement gives the required access to the boot volume that is being backed up; the second statement enables creation of the backup (and the ability to delete backups). The third statement enables the creation and management of user defined backup policies; the fourth statement enables assignment and removal of assignment of backup policies.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group BootVolumeBackupAdmins to use volumes in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to manage boot-volume-backups in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to manage backup-policies in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to manage backup-policy-assignments in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to use volumes in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to manage boot-volume-backups in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to inspect instances in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to manage backup-policies in compartment ${resident}",
        "Allow group BootVolumeBackupAdmins to manage backup-policy-assignments in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users create a volume group",
      "name"       : "VolumeGroupCreators",
      "description" : "Ability  to create a volume group from a set of volumes.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group VolumeGroupCreators to inspect volumes in compartment ${resident}",
        "Allow group VolumeGroupCreators to manage volume-groups in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users clone a volume group",
      "name"       : "VolumeGroupCloners",
      "description" : "Ability  to clone a volume group from an existing volume group.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group VolumeGroupCloners to inspect volumes in compartment ${resident}",
        "Allow group VolumeGroupCloners to manage volume-groups in compartment ${resident}",
        "Allow group VolumeGroupCloners to manage volumes in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users create a volume group backup",
      "name"       : "VolumeGroupBackupAdmins",
      "description" : "Ability  to create a volume group backup.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group VolumeGroupBackupAdmins to inspect volume-groups in compartment ${resident}",
        "Allow group VolumeGroupBackupAdmins to manage volumes in compartment ${resident}",
        "Allow group VolumeGroupBackupAdmins to manage volume-group-backups in compartment ${resident}",
        "Allow group VolumeGroupBackupAdmins to manage volume-backups in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users restore a volume group backup",
      "name"       : "VolumeGroupBackupAdmins",
      "description" : "Ability  to create a volume group by restoring a volume group backup.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group VolumeGroupBackupAdmins to inspect volume-group-backups in compartment ${resident}",
        "Allow group VolumeGroupBackupAdmins to read volume-backups in compartment ${resident}",
        "Allow group VolumeGroupBackupAdmins to manage volume-groups in compartment ${resident}",
        "Allow group VolumeGroupBackupAdmins to manage volumes in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users create, manage, and delete file systems",
      "name"       : "StorageAdmins",
      "description" : "Ability  to create, manage, or delete a file system or file system clone. Administrative functions for a file system include the ability to rename or delete it or disconnect from it.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group StorageAdmins to manage file-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users create file systems",
      "name"       : "FileSystemManagers",
      "description" : "Ability  to create a file system or file system clone.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group FileSystemManagers to manage file-systems in compartment ${resident}",
        "Allow group FileSystemManagers to read mount-targets in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let Object Storage admins manage buckets and objects",
      "name"       : "ObjectAdmins",
      "description" : "Ability  to do all things with Object Storage buckets and objects in all compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group ObjectAdmins to manage buckets in compartment ${resident}",
        "Allow group ObjectAdmins to manage objects in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users write objects to Object Storage buckets",
      "name"       : "ObjectWriters",
      "description" : "Ability  to write objects to any Object Storage bucket in compartment ${resident} (imagine a situation where a client needs to regularly write log files to a bucket). This consists of the ability to list the buckets in the compartment, list the objects in a bucket, and create a new object in a bucket. Although the second statement gives broad access with the manage verb, that access is then scoped down to only the OBJECT_INSPECT and OBJECT_CREATE permissions with the condition at the end of the statement.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group ObjectWriters to read buckets in compartment ${resident}",
        "Allow group ObjectWriters to manage objects in compartment ${resident} where any {request.permission='OBJECT_CREATE', request.permission='OBJECT_INSPECT'}"
      ]
    },
    {
      "purpose"     : "Let bucket users write objects to an indicated Object Storage bucket",
      "name"       : "BucketUsers",
      "description" : "Ability  to write objects to any Object Storage bucket in compartment ${resident} (imagine a situation where a client needs to regularly write log files to a bucket). This consists of the ability to list the buckets in the compartment, list the objects in a bucket, and create a new object in a bucket. Although the second statement gives broad access with the manage verb, that access is then scoped down to only the OBJECT_INSPECT and OBJECT_CREATE permissions with the condition at the end of the statement.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group BucketUsers to read buckets in compartment ${resident}",
        "Allow group BucketUsers to manage objects in compartment ${resident} where all {target.bucket.name='BucketA', any {request.permission='OBJECT_CREATE', request.permission='OBJECT_INSPECT'}}"
      ]
    },
    {
      "purpose"     : "Let users download objects from Object Storage buckets",
      "name"       : "ObjectReaders",
      "description" : "Ability  to download objects from any Object Storage bucket in compartment ${resident}. This consists of the ability to list the buckets in the compartment, list the objects in a bucket, and read existing objects in a bucket.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group ObjectReaders to read buckets in compartment ${resident}",
        "Allow group ObjectReaders to read objects in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let bucket users download objects from Object Storage buckets",
      "name"       : "BucketUsers",
      "description" : "Ability  to download objects from any Object Storage bucket in compartment ${resident}. This consists of the ability to list the buckets in the compartment, list the objects in a bucket, and read existing objects in a bucket.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group BucketUsers to read buckets in compartment ${resident}",
        "Allow group BucketUsers to read objects in compartment ${resident} where target.bucket.name='BucketA'"
      ]
    },
    {
      "purpose"     : "Let database admins manage Oracle Cloud database systems",
      "name"       : "DatabaseAdmins",
      "description" : "Ability  to do all things with the following system types and their associated resources in all compartments: Exadata Cloud Service instances, bare metal DB systems, virtual machine DB systems. This makes sense if you want to have a single set of database admins manage all the bare metal, virtual machine, and Exadata systems in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group DatabaseAdmins to manage database-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let database admins manage Exadata Database Service on Cloud@Customer instances",
      "name"       : "ExaCCAdmins",
      "description" : "Ability  to do all things with the Exadata Database Service on Cloud@Customer resources in all compartments. This makes sense if you want to have a single set of database admins manage all the Exadata Database Service on Cloud@Customer systems in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group ExaCCAdmins to manage database-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let database admins manage MySQL Database resources",
      "name"       : "MySQLAdmins",
      "description" : "Ability to do all things with MySQL Database and MySQL HeatWave resources in all compartments. Creating and managing MySQL Database DB Systems also requires limited access to VCNs, Subnets, and Tag namespaces in the tenancy.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group MySQLAdmins to {SUBNET_READ, SUBNET_ATTACH, SUBNET_DETACH, VCN_READ, COMPARTMENT_INSPECT} in tenancy",
        "Allow group MySQLAdmins to manage mysql-family in tenancy",
        "Allow group MySQLAdmins to use tag-namespaces in tenancy"
      ]
    },
    {
      "purpose"     : "Let database admins manage Oracle Cloud external database resources",
      "name"       : "OnPremDatabaseAdmins",
      "description" : "Ability  to do all things with the following OCI external database resources in all compartments: OCI external container database resources, pluggable database resources, non-container database resources, database connectors. This makes sense if you want to have a single set of database admins manage all the OCI external database resources in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group OnPremDatabaseAdmins to manage external-database-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let fleet admins manage Autonomous Databases",
      "name"       : "DatabaseAdmins",
      "description" : "Ability  to do all things with Autonomous Database instances in all compartments. Applicable if you want to have a single set of database administrators manage all the Autonomous Database databases in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group DatabaseAdmins to manage autonomous-database-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let database admins manage Autonomous Databases",
      "name"       : "AutonomousDatabaseAdmins",
      "description" : "Ability  to do all things with Autonomous Database instances in all compartments. Applicable if you want to have a single set of database administrators manage all the Autonomous Database databases in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AutonomousDatabaseAdmins to manage autonomous-database in compartment ${resident}",
        "Allow group AutonomousDatabaseAdmins to manage autonomous-backup in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let OLTP admins manage Autonomous Databases",
      "name"       : "AutonomousOLTPAdmins",
      "description" : "Ability  to do all things with Autonomous Database instances in all compartments. Applicable if you want to have a single set of database administrators manage all the Autonomous Database databases in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AutonomousOLTPAdmins to manage autonomous-databases in tenancy where target.workloadType = 'OLTP'",
        "Allow group AutonomousOLTPAdmins to manage autonomous-backups in tenancy where target.workloadType = 'OLTP'"
      ]
    },
    {
      "purpose"     : "Let APEX admins manage Autonomous Databases",
      "name"       : "AutonomousDWAdmins",
      "description" : "Ability  to do all things with Autonomous Database instances in all compartments. Applicable if you want to have a single set of database administrators manage all the Autonomous Database databases in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AutonomousAPEXAdmins to manage autonomous-databases in tenancy where target.workloadType = 'APEX'",
        "Allow group AutonomousAPEXAdmins to manage autonomous-backups in tenancy where target.workloadType = 'APEX'"
      ]
    },
    {
      "purpose"     : "Let DW admins manage Autonomous Databases",
      "name"       : "AutonomousDWAdmins",
      "description" : "Ability  to do all things with Autonomous Database instances in all compartments. Applicable if you want to have a single set of database administrators manage all the Autonomous Database databases in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AutonomousDWAdmins to manage autonomous-databases in tenancy where target.workloadType = 'DW'",
        "Allow group AutonomousDWAdmins to manage autonomous-backups in tenancy where target.workloadType = 'DW'"
      ]
    },
    {
      "purpose"     : "Let AJD admins manage Autonomous Databases",
      "name"       : "AutonomousAJDAdmins",
      "description" : "Ability  to do all things with Autonomous Database instances in all compartments. Applicable if you want to have a single set of database administrators manage all the Autonomous Database databases in all the compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AutonomousAJDAdmins to manage autonomous-databases in tenancy where target.workloadType = 'AJD'",
        "Allow group AutonomousAJDAdmins to manage autonomous-backups in tenancy where target.workloadType = 'AJD'"
      ]
    },
    {
      "purpose"     : "Let security admins manage vaults, keys, and secrets",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to do all things with the Vault service in all compartments. This makes sense if you want to have a single set of security admins manage all the vaults, keys, and secret components (including secrets, secret versions, and secret bundles) in all compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityAdmins to manage vaults in compartment ${resident}",
        "Allow group SecurityAdmins to manage keys in compartment ${resident}",
        "Allow group SecurityAdmins to manage secret-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let security admins manage all keys in a specific vault in a compartment",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to do all things with keys in a specific vault in compartment ${resident}.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityAdmins to manage keys in compartment ${resident} where target.vault.id='${vault_OCID}'"
      ]
    },
    {
      "purpose"     : "Let security admins use a specific key in a compartment",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to list, view, and perform cryptographic operations with a specific key in a compartment.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityAdmins to use keys in compartment ${resident} where target.key.id='${key_OCID}'"
      ]
    },
    {
      "purpose"     : "Let a user group delegate key usage in a compartment",
      "name"       : "any-user",
      "description" : "Ability to associate an Object Storage bucket, Block Volume volume, File Storage file system, Kubernetes cluster, or Streaming stream pool with a specific key authorized for use in a specific compartment. With this policy, a user in the specified group does not have permission to use the key itself. Rather, by association, the key can be used by Object Storage, Block Volume, File Storage, Container Engine for Kubernetes, or Streaming on behalf of the user to: Create or update an encrypted bucket, volume, or file system and to encrypt or decrypt data in the bucket, volume, or file system. Create Kubernetes clusters with encrypted Kubernetes secrets at rest in the etcd key-value store. Create a stream pool to encrypt data in the streams in the stream pool. This policy requires that you also have a companion policy that lets Object Storage, Block Volume, File Storage, Container Engine for Kubernetes, or Streaming use the key to perform cryptographic operations.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group ObjectWriters, VolumeWriters, FileWriters, ClusterWriters, StreamWriters to use key-delegate in compartment ${resident} where target.key.id = '${key_OCID}'"
      ]
    },
    {
      "purpose"     : "Let Block Volume, Object Storage, File Storage, Container Engine for Kubernetes, and Streaming services encrypt and decrypt volumes, volume backups, buckets, file systems, Kubernetes secrets, and stream pools",
      "name"       : "any-user",
      "description" : "Ability  to list, view, and perform cryptographic operations with all keys in compartment ${resident}. Because Object Storage is a regional service, it has regional endpoints. As such, you must specify the regional service name for each region where you’re using Object Storage with Vault encryption. This policy also requires that you have a companion policy that allows a user group to use the delegated key that Object Storage, Block Volume, File Storage, Container Engine for Kubernetes, or Streaming will use.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow service blockstorage, objectstorage-${region_name}, FssOc1Prod, oke, streaming to use keys in compartment ${resident} where target.key.id = '${key_OCID}'"
      ]
    },
    {
      "purpose"     : "Let security admins manage all secrets in a specific vault in a compartment",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to do all things with secrets in a specific vault in compartment ${resident}.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityAdmins to manage secret-family in compartment ${resident} where target.vault.id='${vault_OCID}'"
      ]
    },
    {
      "purpose"     : "Let users read, update, and rotate all secrets",
      "name"       : "SecretsUsers",
      "description" : "Ability  to read, update, and rotate all secrets in any vault in the tenancy.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecretsUsers to use secret-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let a compartment admin manage the compartment",
      "name"       : "ServiceAdmins",
      "description" : "Ability  to manage all aspects of a particular compartment. For example, a group called A-Admins could manage all aspects of a compartment called Project-A, including writing additional policies that affect the compartment. For more information, see Policy Attachment. For an example of this kind of setup and additional policies that are useful, see Example Scenario.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group ServiceAdmins to manage all-resources in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Restrict admin access to a specific region",
      "name"       : "RegionAdmins",
      "description" : "Ability  to manage resources in a specific region. Remember that IAM resources must be managed in the home region. If the specified region is not the home region, then the Admin will not be able to manage IAM resources. For more information about the home region, see Managing Regions.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group RegionAdmins to manage all-resources in tenancy where request.region='${region}'"
      ]
    },
    {
      "purpose"     : "Restrict user access to view only summary announcements",
      "name"       : "AnnouncementListers",
      "description" : "Ability  to view the summary versions of announcements about the operational status of Oracle Cloud Infrastructure services.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group AnnouncementListers to inspect announcements in tenancy"
      ]
    },
    {
      "purpose"     : "Let users view details of announcements",
      "name"       : "AnnouncementReaders",
      "description" : "Ability  to view the details of announcements about the operational status of Oracle Cloud Infrastructure services.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group AnnouncementReaders to read announcements in tenancy"
      ]
    },
    {
      "purpose"     : "Let streaming admins manage streaming resources",
      "name"       : "StreamAdmins",
      "description" : "Ability  to do all things with the Streaming service in all compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group StreamAdmins to manage stream-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let streaming users publish messages to streams",
      "name"       : "StreamUsers",
      "description" : "Ability  to produce messages to streams with the Streaming service in all compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group StreamUsers to use stream-push in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let streaming users publish messages to a specific stream",
      "name"       : "StreamUsers",
      "description" : "Ability  to produce messages to a stream with the Streaming service.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group StreamUsers to use stream-push in tenancy where target.stream.id = '${stream_OCID}'"
      ]
    },
    {
      "purpose"     : "Let streaming users publish messages to a stream in a specific stream pool",
      "name"       : "StreamUsers",
      "description" : "Ability  to produce messages to a stream with the Streaming service.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group StreamUsers to use stream-push in tenancy where target.streampool.id = '${stream_OCID}'"
      ]
    },
    {
      "purpose"     : "Let streaming users consume messages from streams",
      "name"       : "StreamUsers",
      "description" : "Ability  to consume messages from streams with the Streaming service in all compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group StreamUsers to use stream-pull in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users view metric definitions in a compartment",
      "name"       : "MetricReaders",
      "description" : "Ability  to view metric definitions  in a specific compartment. For more information about metrics, see Metrics Feature Overview.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group MetricReaders to inspect metrics in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users access monitoring metrics in a compartment",
      "name"       : "MetricReaders",
      "description" : "Ability  to view and retrieve monitoring metrics  for supported resources in a specific compartment. For more information about metrics, see Metrics Feature Overview.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group MetricReaders to read metrics in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Restrict user access to a specific metric namespace",
      "name"       : "MetricReaders",
      "description" : "Ability  to view and retrieve monitoring metrics  for resources under a specific metric namespace . For more information about metrics, see Metrics Feature Overview.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group MetricReaders to read metrics in compartment ${resident} where target.metrics.namespace='oci_computeagent'"
      ]
    },
    {
      "purpose"     : "Let users publish custom metrics",
      "name"       : "MetricPublishers",
      "description" : "Ability  to publish custom metrics  under a specific metric namespace  to the Monitoring service. For instructions, see Publishing Custom Metrics.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group MetricPublishers to use metrics in tenancy where target.metrics.namespace='mycustomnamespace'"
      ]
    },
    {
      "purpose"     : "Let instances make API calls to access monitoring metrics in the tenancy",
      "name"       : "MetricInstances",
      "description" : "Ability  to call the Monitoring API for access to monitoring metrics . The instances on which API requests originate must be members of the dynamic group indicated in the policy. For more information, see Calling Services from an Instance and Metrics Feature Overview.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow dynamic-group MetricInstances to read metrics in tenancy"
      ]
    },
    {
      "purpose"     : "Let users view alarms",
      "name"       : "AlarmUsers",
      "description" : "Ability  to view alarms  for supported resources in tenancy. Does not include the ability to create alarms or to create or delete topics. For more information about alarms, see Alarms Feature Overview.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AlarmUsers to read alarms in compartment ${resident}",
        "Allow group AlarmUsers to read metrics in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users manage alarms",
      "name"       : "AlarmUsers",
      "description" : "Ability  to view and create alarms  with existing notification topics for supported resources in the tenancy. Does not include the ability to create or delete topics. For more information about alarms, see Alarms Feature Overview. All statements are required to let AlarmUsers create alarms.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AlarmUsers to manage alarms in compartment ${resident}",
        "Allow group AlarmUsers to read metrics in compartment ${resident}",
        "Allow group AlarmUsers to use ons-topics in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users manage alarms and create topics",
      "name"       : "AlarmUsers",
      "description" : "Ability  to view and create alarms  (with new or existing topics ) for supported resources in tenancy. Also includes the ability to create subscriptions  in the tenancy, to publish messages  (broadcast notification messages) to all subscriptions in the tenancy, and to move alarms to different compartments in the tenancy. For more information about alarms, see Alarms Feature Overview.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AlarmUsers to manage alarms in compartment ${resident}",
        "Allow group AlarmUsers to read metrics in compartment ${resident}",
        "Allow group AlarmUsers to manage ons-topics in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users access usage reports",
      "scope"       : "${tenancy}",
      "name"       : "Administrators",
      "description" : "Ability  to view usage reports for your tenancy. For more information about usage reports, see Cost and Usage Reports Overview. Where to create the policy: This is a special cross-tenancy policy and must be created in the tenancy. For more information, see Cost and Usage Reports Overview.",
      "policies"  : [
        "define tenancy usage-report as ${tenancy_OCID}",
        "endorse group Administrators to read objects in tenancy usage-report"
      ]
    },
    {
      "purpose"     : "Let users analyze costs",
      "name"       : "ReportReaders",
      "description" : "Ability  to see costs for the tenancy. See Checking Your Expenses and Usage. Where to create the policy: In the tenancy so that users in the ${Example_Group} can see costs for the entire account.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group ReportReaders to read usage-reports in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to manage topics",
      "name"       : "NotificationAdmins",
      "description" : "Ability  to get, create, update, and delete topics in the tenancy, as well as move topics to different compartments in the tenancy. Also includes the ability to create subscriptions  in the tenancy and to publish messages  (broadcast notification messages) to all subscriptions in the tenancy.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group NotificationAdmins to manage ons-topics in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to manage topic subscriptions",
      "name"       : "NotificationAdmins",
      "description" : "Ability  to list, create, update, and delete subscriptions  for topics in the tenancy. Ability to move subscriptions to different compartments in the tenancy.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group NotificationAdmins to manage ons-subscriptions in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to publish messages to topics",
      "name"       : "NotificationAdmins",
      "description" : "Ability  to broadcast notification messages  to all subscriptions  in the tenancy, as well as list, create, update, and delete subscriptions in the tenancy.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group NotificationAdmins to use ons-topics in tenancy"
      ]
    },
    {
      "purpose"     : "Let users create, deploy, and manage functions and applications",
      "name"       : "FunctionsDevelopers",
      "description" : "Ability  to create, deploy, and manage Functions applications and functions. These policy statements give the group access to Cloud Shell, repositories in Oracle Cloud Infrastructure Registry, logs, metrics, functions, networks, and tracing.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group FunctionsDevelopers to use cloud-shell in compartment ${resident}",
        "Allow group FunctionsDevelopers to manage repos in compartment ${resident}",
        "Allow group FunctionsDevelopers to read objectstorage-namespaces in compartment ${resident}",
        "Allow group FunctionsDevelopers to manage logging-family in compartment ${resident}",
        "Allow group FunctionsDevelopers to read metrics in compartment ${resident}",
        "Allow group FunctionsDevelopers to manage functions-family in compartment ${resident}",
        "Allow group FunctionsDevelopers to use virtual-network-family in compartment ${resident}",
        "Allow group FunctionsDevelopers to use use apm-domains in compartment ${resident}",
        "Allow group FunctionsDevelopers to read vaults in compartment ${resident}",
        "Allow group FunctionsDevelopers to use keys in compartment ${resident}",
        "Allow service faas to use apm-domains in compartment ${resident}",
        "Allow service faas to read repos in compartment ${resident} where request.operation='ListContainerImageSignatures'",
        "Allow service faas to {KEY_READ} in compartment ${resident} where request.operation='GetKeyVersion'",
        "Allow service faas to {KEY_VERIFY} in compartment ${resident} where request.operation='Verify'"
      ]
    },
    {
      "purpose"     : "Let users list Events rules in a compartment",
      "name"       : "RuleReaders",
      "description" : "Ability to list Events rules.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group RuleReaders to read cloudevents-rules in tenancy"
      ]
    },
    {
      "purpose"     : "Let admins manage Events rules in a compartment",
      "name"       : "RuleAdmins",
      "description" : "Ability  to manage Events rules, including creating, deleting and updating rules.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group RuleAdmins to inspect compartments in tenancy",
        "Allow group RuleAdmins to use tag-namespaces in tenancy",
        "Allow group RuleAdmins to inspect streams in tenancy",
        "Allow group RuleAdmins to use stream-push in tenancy",
        "Allow group RuleAdmins to use stream-pull in tenancy",
        "Allow group RuleAdmins to use virtual-network-family in tenancy",
        "Allow group RuleAdmins to manage function-family in tenancy",
        "Allow group RuleAdmins to use ons-topic in tenancy",
        "Allow group RuleAdmins to manage cloudevents-rules in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to access all of Cloud Guard",
      "name"       : "CloudGuardReaders",
      "description" : "Read-only access to all of Cloud Guard. In the example policy, the group is 'CloudGuardReaders.'",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group CloudGuardReaders to read cloud-guard-family in tenancy",
        "Allow group CloudGuardReaders to read compartments in tenancy",
        "Allow group CloudGuardReaders to read announcements in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to access Cloud Guard problems",
      "name"       : "CloudGuardProblemReaders",
      "description" : "Read-only access to Cloud Guard problems. In the example policy, the group is 'CloudGuardProblemReaders.'",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group CloudGuardProblemReaders to read cloud-guard-family in tenancy",
        "Allow group CloudGuardProblemReaders to inspect cloud-guard-detectors in tenancy",
        "Allow group CloudGuardProblemReaders to inspect cloud-guard-targets in tenancy",
        "Allow group CloudGuardProblemReaders to inspect cloud-guard-resource-types in tenancy",
        "Allow group CloudGuardProblemReaders to read announcements in tenancy",
        "Allow group CloudGuardProblemReaders to read compartments in tenancy",
        "Allow group CloudGuardProblemReaders to read cloud-guard-config in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to access Cloud Guard detector recipes",
      "name"       : "CloudGuardDetectorReaders",
      "description" : "Read-only access to Cloud Guard detector recipes. In the example policy, the group is 'CloudGuardDetectorReaders.'",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group CloudGuardDetectorReaders to read cloud-guard-detector-recipes in tenancy",
        "Allow group CloudGuardDetectorReaders to read announcements in tenancy",
        "Allow group CloudGuardDetectorReaders to read compartments in tenancy",
        "Allow group CloudGuardDetectorReaders to read cloud-guard-config in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to access Cloud Guard in a single compartment",
      "name"       : "CloudGuardSingleCompartmentReaders",
      "description" : "Read-only access to Cloud Guard in a single compartment. In the example policy, the group is 'CloudGuardSingleCompartmentReaders' and the compartment name is 'cgDemo_RestrictedAccess.'",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group CloudGuardSingleCompartmentReaders to read compartments in compartment ${resident} where target.compartment.name = 'cgDemo_RestrictedAccess'",
        "Allow group CloudGuardSingleCompartmentReaders to read cloud-guard-family in compartment cgDemo_RestrictedAccess",
        "Allow group CloudGuardSingleCompartmentReaders to read announcements in compartment cgDemo_RestrictedAccess",
        "Allow group CloudGuardSingleCompartmentReaders to read cloud-guard-config in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let security admins manage all bastions and sessions",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to manage all resources in the Bastion service in all compartments. This makes sense if you want to have a single set of security admins manage all bastions  and sessions  in all compartments.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityAdmins to manage bastion in compartment ${resident}",
        "Allow group SecurityAdmins to manage bastion-session in compartment ${resident}",
        "Allow group SecurityAdmins to manage virtual-network-family in compartment ${resident}",
        "Allow group SecurityAdmins to read instance-family in compartment ${resident}",
        "Allow group SecurityAdmins to read instance-agent-plugins in compartment ${resident}",
        "Allow group SecurityAdmins to inspect work-requests in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let security admins manage bastion sessions",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to manage all sessions  on all bastions  and in all compartments, including creating, connecting to, and terminating sessions.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityAdmins to use bastion in compartment ${resident}",
        "Allow group SecurityAdmins to manage bastion-session in compartment ${resident}",
        "Allow group SecurityAdmins to manage virtual-network-family in compartment ${resident}",
        "Allow group SecurityAdmins to read instance-family in compartment ${resident}",
        "Allow group SecurityAdmins to read instance-agent-plugins in compartment ${resident}",
        "Allow group SecurityAdmins to inspect work-requests in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let security admins manage bastion sessions for a specific target host in a compartment",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to manage sessions  on a bastion  in a specific compartment, and only for sessions that provide connectivity to a specific Compute instance.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group SecurityAdmins to use bastion in compartment ${resident}",
        "Allow group SecurityAdmins to manage bastion-session in compartment ${resident} where ALL {target.resource.ocid='${instance_OCID}', target.bastion-session.username='${session_username}'}",
        "Allow group SecurityAdmins to manage virtual-network-family in tenancy",
        "Allow group SecurityAdmins to read instance-family in tenancy",
        "Allow group SecurityAdmins to read instance-agent-plugins in tenancy",
        "Allow group SecurityAdmins to inspect work-requests in tenancy"
      ]
    },
    {
      "purpose"     : "Let security admins configure scanning of instances in all compartments",
      "name"       : "SecurityAdmins",
      "description" : "Ability  to configure Oracle Vulnerability Scanning Service to scan all Compute instances  in all compartments, and to view the scanning results. Consider this policy if you want to have a single set of security administrators configure vulnerability scanning for all instances.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityAdmins to manage vss-family in compartment ${resident}",
        "Allow service vulnerability-scanning-service to manage instances in compartment ${resident}",
        "Allow service vulnerability-scanning-service to read compartments in compartment ${resident}",
        "Allow service vulnerability-scanning-service to read vnics in compartment ${resident}",
        "Allow service vulnerability-scanning-service to read vnic-attachments in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users view vulnerability scan results in all compartments",
      "name"       : "SecurityReviewers",
      "description" : "Ability  to view the results of scanning Compute instances  in all compartments for security vulnerabilities. Consider this policy if you have a dedicated team responsible for reviewing or auditing the security of your entire tenancy.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group SecurityReviewers to read vss-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Allow a group to manage service connectors",
      "name"       : "ConnectorAdmins",
      "description" : "Ability  to list, create, update, and delete service connectors  in the tenancy. Ability to move service connectors to different compartments in the tenancy.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group ConnectorAdmins to manage serviceconnectors in tenancy"
      ]
    },
    {
      "purpose"     : "Allow a group to call Operations Insights ingest operations at tenancy",
      "name"       : "OpsInsightUsers",
      "description" : "Ability to call Operations Insights ingest operations at the tenancy level only.",
      "scope"       : "${tenancy}",
      "policies"  : [
        "Allow group OpsInsightUsers to use opsi-database-insights in tenancy where any {request.operation='IngestSqlBucket', request.operation='IngestSqlText', request.operation='IngestSqlPlanLines'}"
      ]
    },
    {
      "purpose"     : "Let users create and delete workspaces without networking (Data Integration)",
      "name"       : "DataIntegrationAdmins",
      "description" : "Ability to create, delete, and modify workspaces within a compartment.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group DataIntegrationAdmins to manage dis-workspaces in compartment ${resident}",
        "Allow group DataIntegrationAdmins to manage dis-work-requests in compartment ${resident}",
        "Allow group DataIntegrationAdmins to manage tag-namespaces in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users create and delete workspaces with networking (Data Integration)",
      "name"       : "DataIntegrationAdmins",
      "description" : "Ability to create, delete, and modify workspaces within a virtual network.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow service dataintegration to use virtual-network-family in compartment ${resident}",
        "Allow group DataIntegrationAdmins to manage dis-workspaces in compartment ${resident}",
        "Allow group DataIntegrationAdmins to manage dis-work-requests in compartment ${resident}",
        "Allow group DataIntegrationAdmins to use virtual-network-family in compartment ${resident}",
        "Allow group DataIntegrationAdmins to manage tag-namespaces in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users and resource principal access and use Object Storage for all workspaces (Data Integration)",
      "name"       : "ObjectStorageSubscribers",
      "description" : "Ability to create and use Object Storage data assets within all workspaces.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow any-user to use buckets in compartment ${resident} where ALL {request.principal.type='disworkspace'}",
        "Allow any-user to manage objects in compartment ${resident} where ALL {request.principal.type='disworkspace'}",
        "Allow group ObjectStorageSubscribers to use object-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users and resource principal access and use Object Storage for a given workspace (Data Integration)",
      "name"       : "ObjectStorageSubscribers",
      "description" : "Ability to create and use Object Storage data assets within all workspaces.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow any-user to use buckets in compartment ${resident} where ALL {request.principal.type='disworkspace', request.principal.id='${workspace_OCID}'}",
        "Allow any-user to manage objects in compartment ${resident} where ALL {request.principal.type='disworkspace', request.principal.id='${workspace_OCID}'}",
        "Allow group ObjectStorageSubscribers to use object-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users and resource principal access and use autonomous databases as a target for all workspaces (Data Integration)",
      "name"       : "AutonomousDatabaseSubscribers",
      "description" : "Ability to create and use autonomous database data assets within all workspaces.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow any-user to use buckets in compartment ${resident} where ALL {request.principal.type='disworkspace'}",
        "Allow any-user to manage objects in compartment ${resident} where ALL {request.principal.type='disworkspace'}",
        "Allow any-user to manage buckets in compartment ${resident} where ALL {request.principal.type='disworkspace', request.permission='PAR_MANAGE'}",
        "Allow group AutonomousDatabaseSubscribers to use object-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users and resource principal access and use autonomous databases as a target for a given workspace (Data Integration)",
      "name"       : "AutonomousDatabaseSubscribers",
      "description" : "Ability to create and use autonomous database data assets within all workspaces.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow any-user to use buckets in compartment ${resident} where ALL {request.principal.type='disworkspace', request.principal.id='${workspace_OCID}'}",
        "Allow any-user to manage objects in compartment ${resident} where ALL {request.principal.type='disworkspace', request.principal.id='${workspace_OCID}'}",
        "Allow any-user to manage buckets in compartment ${resident} where ALL {request.principal.type='disworkspace', request.principal.id='${workspace_OCID}', request.permission='PAR_MANAGE'}",
        "Allow group AutonomousDatabaseSubscribers to use object-family in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users move workspaces to a new compartment (Data Integration)",
      "name"       : "DataIntegrationAdmins",
      "description" : "Ability to move workspaces to a new compartment.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow service dataintegration to inspect compartments in compartment ${resident}",
        "Allow group DataIntegrationAdmins to manage dis-workspaces in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let users search objects within a workspace and publish tasks to the OCI Data Flow service (Data Integration)",
      "name"       : "any-user",
      "description" : "Ability to publish the different tasks within all workspaces to the OCI Data Flow service.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow any-user to manage dataflow-application in compartment ${resident} where ALL {request.principal.type='disworkspace'}",
        "Allow service dataintegration to {TENANCY_INSPECT} in tenancy",
        "Allow service dataintegration to {DIS_METADATA_INSPECT} in tenancy"
      ]
    },
    {
      "purpose"     : "Let users publish tasks to a particular OCI Data Flow service workspace(Data Integration)",
      "name"       : "any-user",
      "description" : "Ability to publish the different tasks within all workspaces to the OCI Data Flow service.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow any-user to manage dataflow-application in compartment ${resident} where ALL {request.principal.type='disworkspace', request.principal.id='${workspace_OCID}'}"
      ]
    },
    {
      "purpose"     : "Let users access the OCI Vault service for a given workspace (Data Integration)",
      "name"       : "SecretUsers",
      "description" : "Ability to use OCI Vault secrets within all workspaces.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow any-user to read secret-bundles in compartment ${resident} where ALL {request.principal.type='disworkspace'}",
        "Allow any-user to read secret-bundles in compartment ${resident} where ALL {request.principal.type='disworkspace', request.principal.id='${workspace_OCID}'}",
        "Allow group SecretUsers to read secret-bundles in compartment ${resident}"
      ]
    },
    {
      "purpose"     : "Let admins manage announcement subscriptions",
      "name"       : "AnnouncementAdmins",
      "description" : "Ability  to manage subscriptions that deliver announcements about the operational status of Oracle Cloud Infrastructure services.",
      "scope"       : "${resident}",
      "policies"  : [
        "Allow group AnnouncementAdmins to manage announcement-subscriptions in compartment ${resident}"
      ]
    }
  ]